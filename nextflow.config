// Enable Nextflow DSL2
nextflow.enable.dsl=2

// Input & Output Parameters
params {
    // Data source selection
    use_sra = false                         // Set to true to use SRA data instead of local files
    
    // Input options - either read files or SRA IDs
    reads = "test_data/*_R{1,2}.fastq.gz"   // Pattern for local paired-end reads
    sra_ids = ""                            // Comma-separated list of SRA IDs (e.g., "SRR10971381,SRR10971382")
    
    // Output directory
    outdir = "results"
    
    // Databases - specify paths or they will be downloaded automatically
    pfam_db = false    // Path to Pfam HMM database
    nr_db = false      // Path to protein reference database for DIAMOND
    
    // Tool parameters
    hmmscan_evalue = 1e-5
    diamond_evalue = 1e-5
    
    // Computational resources
    cpus = 8
    memory = '16 GB'
    max_time = '48.h'
}

// Output Organization
workDir = 'work'

// Process configuration
process {
    // Default settings for all processes
    cpus = { check_max(1 * task.attempt, 'cpus') }
    memory = { check_max(4.GB * task.attempt, 'memory') }
    time = { check_max(2.h * task.attempt, 'time') }
    
    // Error handling
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    
    // Default publish directory structure
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: 'copy',
        overwrite: true
    ]
    
    // Process-specific configurations with containers
    withName:GET_SRR {
        container = 'quay.io/biocontainers/sra-tools:3.0.3--h87f3376_0'
        cpus = 4
        memory = '8 GB'
        time = '6.h'
        // Cache downloaded files
        storeDir = { "${params.outdir}/sra_data" }
    }
    
    withName:FASTP {
        container = 'staphb/fastp:0.23.2'
        cpus = 4
        memory = '8 GB'
    }
    
    withName:SPADES {
        container = 'staphb/spades:3.15.5'
        cpus = params.cpus
        memory = params.memory
        time = '24.h'
    }
    
    withName:QUAST {
        container = 'staphb/quast:5.2.0'
        cpus = 2
        memory = '4 GB'
    }
    
    withName:PRODIGAL {
        container = 'quay.io/biocontainers/prodigal:2.6.3--h031d066_6'
        cpus = 2
        memory = '4 GB'
    }
    
    withName:HMMSCAN {
        container = 'quay.io/biocontainers/hmmer:3.3.2--h1b792b2_1'
        cpus = params.cpus
        memory = '12 GB'
        time = '24.h'
    }
    
    withName:DIAMOND {
        container = 'quay.io/biocontainers/diamond:2.1.6--h5b5514e_0'
        cpus = params.cpus
        memory = '12 GB'
        time = '24.h'
    }
    
    withName:MULTIQC {
        container = 'quay.io/biocontainers/multiqc:1.14--pyhdfd78af_0'
        cpus = 1
        memory = '2 GB'
    }
}

// Define profiles for different execution environments
profiles {
    standard {
        process.executor = 'local'
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
        docker.temp = 'auto'
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }
    
    // Add a profile for cloud execution if needed
    awsbatch {
        process.executor = 'awsbatch'
        process.queue = 'nextflow-batch-queue'
        aws.region = 'us-east-1'
        aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
    }
}

// Helper function to ensure resource requests don't exceed available resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.memory as nextflow.util.MemoryUnit) == 1)
                return params.memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.cpus as int)
        } catch (all) {
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            return obj
        }
    } else {
        return obj
    }
}

// Enable trace for basic logging
trace {
    enabled = true
    file = "${params.outdir}/pipeline_trace.txt"
    fields = 'task_id,name,status,exit,realtime,cpus,memory,%cpu,%mem'
    overwrite = true
}

// Report generation
report {
    enabled = true
    file = "${params.outdir}/pipeline_report.html"
    overwrite = true
}

// Timeline visualization
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_timeline.html"
    overwrite = true
}

// Dag visualization
dag {
    enabled = true
    file = "${params.outdir}/pipeline_dag.svg"
    overwrite = true
}

// Manifest with pipeline information
manifest {
    name = 'BIOL7210-Workflow-Excercise'
    author = 'Aaryesh Deshpande'
    description = 'Bacterial functional gene discovery pipeline with SRA integration'
    mainScript = 'main.nf'
    version = '1.0.0'
    nextflowVersion = '>=22.10.0'
}